Easy NGP-I
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] sol=new int[nums1.length];
        int[] temp=new int[nums2.length];
        Stack<Integer> stack=new Stack<>();
        for(int i=nums2.length-1;i>=0;i--){
            while(!stack.isEmpty() && stack.peek()<nums2[i]){
                stack.pop();
            }
            if(i<nums2.length){
                if(!stack.isEmpty()){
                    temp[i]=stack.peek();
                }else{
                    temp[i]=-1;
                }
            }
            stack.push(nums2[i]);
        }
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums2.length;i++){
            map.put(nums2[i],temp[i]);
        }
        for(int i=0;i<nums1.length;i++){
            sol[i]=map.get(nums1[i]);
        }
        return sol;
    }
}

Medium NGP-II
class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int[] sol=new int[nums.length];
        Stack<Integer> stack=new Stack<>();
        for(int i=2*nums.length-1;i>=0;i--){
            while(!stack.isEmpty() && stack.peek()<=nums[i%nums.length]){
                stack.pop();
            }
            if(i<nums.length){
                if(!stack.isEmpty()){
                    sol[i]=stack.peek();
                }
                else{
                    sol[i]=-1;
                }
            }
            stack.push(nums[i%nums.length]);
        }
        return sol;
    }
}
